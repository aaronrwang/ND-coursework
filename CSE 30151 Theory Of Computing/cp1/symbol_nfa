#!/usr/bin/env python3
import sys
from typing import Tuple, List
from collections import defaultdict, deque

class NFA:
  # Q: States: list
  # A: Alphabet: 
  # S: starting state
  # F: Final states
  # D: Transitions
  def __init__(self, Q=[],A=[],S=None,F=[],D=defaultdict(list)):
    self.Q = Q
    self.A = A
    self.S = S
    self.F = F
    self.D = D

def read_nfa(filename: str):
  M = NFA()
  with open(filename,'r') as fp:
      Q = set(fp.readline().strip().split(" "))
      A = set(fp.readline().strip().split(" "))
      S = fp.readline().strip()
      F = set(fp.readline().strip().split(" "))
      data = fp.readlines()
      D = defaultdict(list)
      for line in data:
        q_0,t,q_1 = line.strip().split(" ")
        D[(q_0,t)].append(q_1)
  M = NFA(Q,A,S,F,D)
  return M

def write_nfa(n: NFA):
  try:
    string = ''
    string += ' '.join(n.Q) + ' \n'
    string += ' '.join(n.A) + ' \n'
    string += n.S + '\n'
    string += ' '.join(n.F) + ' \n'
    for key in n.D:
      for q in n.D[key]:
        string +=' '.join(key)+' '+q+'\n'
    print(string, end="")
    return True
  except:
    return False
  
def epsilon_nfa() -> NFA:
  M = NFA(['q0'],[],'q0',['q0'],defaultdict(list))
  return M

def symbol_nfa(symbol: str) -> NFA: 
  M = NFA(['q0', 'q1'],[symbol],'q0',['q1'],defaultdict(list))
  M.D[('q0',symbol)].append('q1')
  return M

if __name__ == "__main__":
  n = symbol_nfa(sys.argv[1])
  write_nfa(n)
