#!/usr/bin/env python3
# This code was not done in a way that the direction suggested, but Chiang said it was ok. 
# Also, we had issues importing files so we copy pasted all of the functions to each file
import sys
import os
from typing import Tuple, List, Deque, Dict
from collections import defaultdict, deque


class Node:
  def __init__(self, type, value=None, children=[]):
    self.type = type # symbol, epsilon, union, concat, star
    self.value = value # if symbol what value
    self.children = children # if operator (union, concat, star), what does it operate on?

class NFA:
  def __init__(self, states=[], alphabet=[], start=None, accept=[], transitions=defaultdict(list)):
    self.states = states
    self.alphabet = alphabet
    self.start = start
    self.accept = accept
    self.transitions = transitions

def write_nfa(nfa: NFA):
  try:
    string = ''
    string += ' '.join(nfa.states) + ' \n'
    string += ' '.join(nfa.alphabet) + ' \n'
    string += nfa.start + '\n'
    string += ' '.join(nfa.accept) + ' \n'
    for key in nfa.transitions:
      if key[1] == '&&':
        for q, g in nfa.transitions[key]:
          string +=key[0] +' ' + g + ' ' + q + '\n'
      else:
        for q in nfa.transitions[key]:
          string +=' '.join(key)+' '+q+'\n'
    print(string, end="")
    return True
  except:
    raise("Error in write_nfa")
    return False
  
def epsilon_nfa() -> NFA: #epsilon NFA
  M = NFA(['q0'],[],'q0',['q0'],defaultdict(list))
  return M 

def symbol_nfa(symbol: str) -> NFA:  #NFA with one letter
  M = NFA(['q0', 'q1'],[symbol],'q0',['q1'],defaultdict(list))
  M.transitions[('q0',symbol)].append('q1')
  return M

#reads nfa from file
def read_nfa(filename: str) -> NFA:
  with open(filename,'r') as fp:
      states = set(fp.readline().strip().split(" "))
      alphabet = set(fp.readline().strip().split(" "))
      start = fp.readline().strip()
      accept = set(fp.readline().strip().split(" "))
      data = fp.readlines()
      transitions = defaultdict(list)
      for line in data:
        q_0,t,q_1 = line.strip().split(" ")
        transitions[(q_0,t)].append(q_1)
  nfa = NFA(states, alphabet, start, accept, transitions)
  return nfa

#returns dicts for {oldState: newState} of concatenated nfas
def combinedStatesDicts(states_1: List[str], states_2: List[str]) -> Tuple[Dict[str, str], Dict[str, str]]:
  newStates_1 = defaultdict(str)
  newStates_2 = defaultdict(str)

  count = 1
  for state in states_1:
    newStates_1[state] = 'q' + str(count)
    count += 1
  
  for state in states_2:
    newStates_2[state] = 'q' + str(count)
    count += 1

  return newStates_1, newStates_2

def newStatesDict(states_1: List[str]) -> Dict[str, str]:
  newStates_1 = defaultdict(str)
  count = 1 #start at 1 for extra q0 start state
  for state in states_1:
    newStates_1[state] = 'q' + str(count)
    count += 1

  return newStates_1


#create nfa recognizing the concatenation of two nfas
def concat_nfa(nfa_1: NFA, nfa_2: NFA) -> NFA:
  states_1, states_2 = combinedStatesDicts(nfa_1.states, nfa_2.states) #get new state names
  states = list(states_1.values()) + list(states_2.values())
  alphabet = set(nfa_1.alphabet) | set(nfa_2.alphabet)
  start = states_1[nfa_1.start]
  accept = list(map(lambda q: states_2[q], nfa_2.accept))
  transitions = defaultdict(list)

  #add new state names to all transitions
  for q0, t in nfa_1.transitions.keys():
    if t == '&&':
      transitions[(states_1[q0], t)] = list(map(lambda a: (states_1[a[0]],a[1]) , nfa_1.transitions[(q0, t)]))
    else:
      transitions[(states_1[q0], t)] = list(map(lambda q1: states_1[q1] , nfa_1.transitions[(q0, t)]))

  for q0, t in nfa_2.transitions.keys():
    if t == '&&':
      transitions[(states_2[q0], t)] = list(map(lambda a: (states_2[a[0]],a[1]) , nfa_2.transitions[(q0, t)]))
    else:
      transitions[(states_2[q0], t)] = list(map(lambda q1: states_2[q1] , nfa_2.transitions[(q0, t)]))
  # for q0, t in nfa_1.transitions.keys():
  #   transitions[(states_1[q0], t)] = list(map(lambda q1: states_1[q1], nfa_1.transitions[(q0, t)]))
  
  # for q0, t in nfa_2.transitions.keys():
  #   transitions[(states_2[q0], t)] = list(map(lambda q1: states_2[q1], nfa_2.transitions[(q0, t)]))

  #add transitions from accept of nfa_1 to start of nfa_2
  for q0 in nfa_1.accept:
    transitions[(states_1[q0], '&')].append(states_2[nfa_2.start])
  concat_nfa = NFA(states, alphabet, start, accept, transitions)
  return concat_nfa

def union_nfa(nfa_1: NFA, nfa_2: NFA) -> NFA:
  states_1, states_2 = combinedStatesDicts(nfa_1.states, nfa_2.states) #get new state names
  states = ["q0"] + list(states_1.values()) + list(states_2.values())
  alphabet = set(nfa_1.alphabet) | set(nfa_2.alphabet)
  start = "q0"
  acceptNfa_1 = list(map(lambda q: states_1[q], nfa_1.accept))
  acceptNfa_2 = list(map(lambda q: states_2[q], nfa_2.accept))
  accept = acceptNfa_1 + acceptNfa_2
  transitions = defaultdict(list)

  #add new state names to all transitions
  for q0, t in nfa_1.transitions.keys():
    if t == '&&':
      transitions[(states_1[q0], t)] = list(map(lambda a: (states_1[a[0]],a[1]) , nfa_1.transitions[(q0, t)]))
    else:
      transitions[(states_1[q0], t)] = list(map(lambda q1: states_1[q1] , nfa_1.transitions[(q0, t)]))

  for q0, t in nfa_2.transitions.keys():
    if t == '&&':
      transitions[(states_2[q0], t)] = list(map(lambda a: (states_2[a[0]],a[1]) , nfa_2.transitions[(q0, t)]))
    else:
      transitions[(states_2[q0], t)] = list(map(lambda q1: states_2[q1] , nfa_2.transitions[(q0, t)]))

  #add start transitions
  transitions[(start, '&')] = [states_1[nfa_1.start], states_2[nfa_2.start]]
  union_nfa = NFA(states, alphabet, start, accept, transitions)
  return union_nfa


#create nfa recognizing Kleene star of nfa
def star_nfa(nfa: NFA) -> NFA:
  newStates = newStatesDict(nfa.states) #get new state names
  states = ["q0"] + list(newStates.values())
  alphabet = nfa.alphabet
  start = "q0"
  accept = ["q0"] + list(map(lambda q: newStates[q], nfa.accept))
  transitions = defaultdict(list)

  #add new state names to all transitions
  for q0, t in nfa.transitions.keys():
    if t == '&&':
      transitions[(newStates[q0], t)] = list(map(lambda a: (newStates[a[0]],a[1]) , nfa.transitions[(q0, t)]))
    else:
      transitions[(newStates[q0], t)] = list(map(lambda q1: newStates[q1] , nfa.transitions[(q0, t)]))

  #add transitions from accept of nfa to start of nfa
  for q0 in nfa.accept:
    transitions[(newStates[q0], '&')].append(newStates[nfa.start])

  #add transition from new start state
  transitions[(start, '&')] = [newStates[nfa.start]]
  star_nfa = NFA(states, alphabet, start, accept, transitions)
  return star_nfa

def group_nfa(nfa: NFA, group: int) -> NFA:
  # Follows principles in star_nfa
  newStates = newStatesDict(nfa.states) #get new state names
  states = ["q0"] + list(newStates.values())
  end_state =f"q{len(states)}"
  states.append(end_state)
  alphabet = nfa.alphabet
  start = "q0"
  accept = [end_state]
  transitions = defaultdict(list)
  #add new state names to all transitions
  for q0, t in nfa.transitions.keys():
    if t == '&&':
      transitions[(newStates[q0], t)] = list(map(lambda a: (newStates[a[0]],a[1]) , nfa.transitions[(q0, t)]))
    else:
      transitions[(newStates[q0], t)] = list(map(lambda q1: newStates[q1] , nfa.transitions[(q0, t)]))

  # add transitions from accept of nfa to to new accept state, epsilon close transition
  for q0 in nfa.accept:
    transitions[(newStates[q0], '&&')].append((end_state, f'c{group}'))

  #add open transition from new start state
  transitions[(start, '&&')] = [(newStates[nfa.start],f'o{group}')]
  group_nfa = NFA(states, alphabet, start, accept, transitions)
  return group_nfa

# Debugging code.
def dfsdebug(root: Node, tabs: int):
  for i in range(tabs):
    print(' ',end='')
  print(root.type, root.value)
  for node in root.children:
    dfsdebug(node, tabs+1)

#code for union
def union(tree: Deque[Node]) -> Node:
  left = tree.popleft()
  while len(tree):
    middle = tree.popleft()
    if middle.type !='union':
      raise Exception('Unexpected value in union')
    right = tree.popleft()
    node = Node('union',None,[left,right])
    left = node
  return left

# code for concat
def concat(tree: Deque[Node]) -> List[Node]:
  new_tree = deque()
  left = tree.popleft()
  while len(tree):
    right = tree.popleft()
    if right.type == 'union':
      new_tree.append(left)
      new_tree.append(right)
      left = Node('epsilon')
      continue
    if left.type == 'epsilon':
      left = right
      continue
    node = Node('concat',None,[left,right])
    left = node
  new_tree.append(left)
  return new_tree

#code for star
def star(tree: Deque[Node]) -> List[Node]:
  new_tree = deque([tree.popleft()])
  while len(tree):
    right = tree.popleft()
    if right.type == 'star':
      if new_tree[-1].type == 'epsilon':
        raise Exception('error: unexpected *')
      right.children=[new_tree.pop()]
      new_tree.append(right)
    else:
      new_tree.append(right)
  return new_tree

# first find all *s, then concat, then union
def union_concat_star(tree: List[Node]) -> Node:
  return union(concat(star(tree)))
  
def parse_re(regex: list, index: int, group:int = 0) -> Node:
  
  prev = Node('epsilon')
  tree = deque([prev])
  group_count = group + 1
  while index < len(regex):
    #print(tree)
    #print(regex[index])
    c = regex[index]
    node = None
    if c =='(':
      # open subexpression
      node, index, group_count = parse_re(regex, index+1,group_count)
    elif c == ')':
      # close subexpression
      if not group:
        raise Exception('error: expected end of regular expression but found )')
      node = Node('subexpr',group,[union_concat_star(tree)])
      return node, index, group_count
    elif c == '|':
      # create union node
      node = Node('union')
    elif c == '*':
      # create star node
      node = Node('star')
    else:
      # create symbol
      node = Node('symbol', c)
    tree.append(node)
    index+=1
  if group:
    raise Exception('error: expected ) but found ⊣')

  # close total expression
  root = union_concat_star(tree)

  return root

def dfsprint(root: Node):
  if root.type == 'symbol':
    print(f'symbol[{root.value}]',end='')
  elif root.type == 'epsilon':
    print('epsilon',end='')
  elif root.type == 'star':
    print('star(',end='')
    dfsprint(root.children[0])
    print(')',end='')
  elif root.type == 'subexpr':
    print(f'group[{root.value}](',end='')
    dfsprint(root.children[0])
    print(')',end='')
  else:
    print(f'{root.type}(',end='')
    dfsprint(root.children[0])
    print(',',end='')
    dfsprint(root.children[1])
    print(')',end='')
  
def treeToNFA(root: Node): #recursively converts based off type
  if root.type == 'symbol':
    return symbol_nfa(root.value)
  elif root.type == 'epsilon':
    return epsilon_nfa()
  elif root.type == 'star':
    return star_nfa(treeToNFA(root.children[0]))
  elif root.type == "concat":
    return concat_nfa(treeToNFA(root.children[0]), treeToNFA(root.children[1]))
  elif root.type == "union":
    return union_nfa(treeToNFA(root.children[0]), treeToNFA(root.children[1]))
  elif root.type == 'subexpr':
    return group_nfa(treeToNFA(root.children[0]), root.value)
  
  return 
def group(visited: dict, cur: str, i: int) -> List[Tuple[str, str]]:
  path = [] #(state, transition) pairs

  #backtrack for path
  while (cur, i) in visited:
    prev, prev_i, trans = visited[(cur, i)]
    path.append(trans)
    cur, i = prev, prev_i #move back
  path.reverse()

  # using backtracked path to create the groups
  # creates groups using a stack to keep track of what groups are currently open
  groups = {}
  stack = []
  for trans in path:
    if len(trans) > 1:
      if trans[0] == 'o':
        group = int(trans[1:])
        groups[group] = ''
        stack.append(group)
      else:
        stack.pop()
    if len(trans) == 1:
      for group in stack:
        groups[group]+=trans

  return groups

def match(M: NFA, w: str) -> Tuple[bool, List[Tuple[str, str]]]:
  visited = {} #(state, i): (prev_state, prev_i, transition)
  q = deque([(M.start, 0)]) #(state, i) pairs

  #breadth first search
  while q:
    cur, i = q.popleft()

    #check if reached the end of word
    if i == len(w) and cur in M.accept:
      return (True, group(visited, cur, i))

    #check for rest of transitions
    if i < len(w):
      for state in M.transitions.get((cur, w[i]), []):
        if not (state, i + 1) in visited:
          visited[(state, i + 1)] = (cur, i, w[i]) # save character read
          q.append((state, i + 1))

    #check for any epsilon transitions
    for state in M.transitions.get((cur, '&'), []):
      if not (state, i) in visited:
        visited[(state, i)] = (cur, i, '') # save character read (in this case nothing)
        q.append((state, i)) #don't increment i

    # check for group transitions   
    for state, trans in M.transitions.get((cur, '&&'), []):
      if not (state, i) in visited:
        visited[(state, i)] = (cur, i, trans) # save the starts and ends of groups
        q.append((state, i)) #don't increment i
    
  return (False, None)


def re_group(): #constructs and reads line by line. It prints out the entire string it is correct 
  
  regex = sys.argv[1]
  input = sys.argv[2]
  root = parse_re(regex, 0)
  builtNFA = treeToNFA(root)
  # write_nfa(builtNFA)
  result, groups = match(builtNFA, input)
  if result:
    print("accept")
  else:
    print("reject")


def process_file_with_sed_commands(file_path):
    # read the sed commands from the file
    try:
        with open(file_path, 'r') as f:
            commands = f.readlines()
        return commands
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.", file=sys.stderr)
        sys.exit(1)

def apply_sed_commands(text, commands, printout=False):
    # remove trailing newline if present
    if text.endswith('\n'):
        text = text[:-1]
        add_newline = True
    else:
        add_newline = False
    
    # process commands
    seenNFAs = {}
    looppoints = {}
    line_index = 1
    command_index = 0
    
    if printout:
        print(text)

    # filters out the :loop commands and sets a dictionary so it points to the right place.
    filtered_commands = []
    for command in commands:
        if command[0] == ':':
            looppoints[command[1:].strip()] = len(filtered_commands) - 1 # -1 b/c will always go one extra
        else:
            filtered_commands.append(command)
    commands = filtered_commands

    while command_index < len(commands):
        # print(command_index)
        command = commands[command_index].strip()

        # skip empty commands
        if not command:
            command_index += 1
            continue
        
        # handle substitution
        elif command.startswith('s/'):
            parts = command[2:].split('/', 2)
            if len(parts) < 3:
                print(f"Error: Invalid substitution command '{command}'", file=sys.stderr)
                sys.exit(1)
            
            pattern, replacement = parts[0], parts[1]    
            # parse regex and create NFA
            try:
                if pattern not in seenNFAs:
                    builtNFA = treeToNFA(parse_re(pattern, 0))
                    seenNFAs[pattern] = builtNFA
                else:
                   builtNFA = seenNFAs[pattern]
                result, groups = match(builtNFA, text)
            except Exception as e:
                print(f"Error parsing regex '{pattern}': {str(e)}", file=sys.stderr)
                sys.exit(1)

            if result:
                old_text = text
                new_text = ""
                i = 0
                while i < len(replacement):
                    #backreference
                    if i < len(replacement) - 3 and replacement[i:i+3] == "\\g<" and ">" in replacement[i+3:]:
                        end_index = replacement.find(">", i+3)
                        group_num = int(replacement[i+3:end_index])
                        if group_num in groups:
                            new_text += groups[group_num]
                            i = end_index + 1
                        else:
                            
                            i = end_index + 1
                    else:
                        new_text += replacement[i]
                        i += 1
                        
                text = new_text
                if printout:
                    print(f"{line_index}. subst {old_text} -> {text}")
            
            command_index += 1
            line_index += 1
            
        # handle branch
        elif command.startswith('/'):
            parts = command[1:].split('/', 1)
            if len(parts) < 2 or not parts[1].startswith('b'):
                print(f"Error: Invalid branch command '{command}'", file=sys.stderr)
                sys.exit(1)
            
            pattern = parts[0]
            label = parts[1][1:]  # remove 'b' prefix
            
            if label not in looppoints:
                print(f"Error: Undefined label '{label}'", file=sys.stderr)
                sys.exit(1)
            
            # parse regex and create NFA
            try:
              if pattern not in seenNFAs:
                builtNFA = treeToNFA(parse_re(pattern, 0))
                seenNFAs[pattern] = builtNFA
              else:
                builtNFA = seenNFAs[pattern]
              result, _ = match(builtNFA, text)
            except Exception as e:
                print(f"Error parsing regex '{pattern}': {str(e)}", file=sys.stderr)
                sys.exit(1)

            if result:
                command_index = looppoints[label] + 1
                if printout:
                    print(f"{line_index}. branch {command_index + 1}")
                line_index += 1
            else:
                command_index += 1
                line_index += 1
        
        #handle errors
        else:
            print(f"Error: Unknown command '{command}'", file=sys.stderr)
            sys.exit(1)
    
    # add newline back if we removed it
    if add_newline:
        text += '\n'
    
    return text

def process_input(input_source, commands , printout): #commands is a list
    # process either a file or stdin
    if input_source == sys.stdin:
        for line in input_source:
            processed_line = apply_sed_commands(line, commands, printout)
            print(processed_line, end='')
    else: #file
        try:
            with open(input_source, 'r') as f:
                for line in f:
                    processed_line = apply_sed_commands(line, commands, printout)
                    print(processed_line, end='')
        except FileNotFoundError:
            print(f"Error: File '{input_source}' not found.", file=sys.stderr)
            sys.exit(1)

def main():
    args = sys.argv[1:]
    printout = False
    sed_commands = []  # to hold the sed commands
    files_to_process = [] # files to process the sed commands on 
    
    i = 0
    while i < len(args):
        if args[i] == '-v':
            printout = True
            i += 1
        elif args[i] == '-f':  # check for the -f flag
            if i + 1 < len(args): 
                command_file = args[i + 1]
                file_commands = process_file_with_sed_commands(command_file)
                sed_commands.extend(file_commands)
                i += 2  # skip over the flag and file path
            else:
                print("Error: '-f' requires a file argument.", file=sys.stderr)
                sys.exit(1)
        elif args[i] == '-e':  # Check for the -e flag
            if i + 1 < len(args):  
                sed_commands.append(args[i + 1])  # add the command
                i += 2  # skip over the flag and command
            else:
                print("Error: '-e' requires a sed command argument.", file=sys.stderr)
                sys.exit(1)
        else:
            # this is not a flag, treat it as a file to process
            files_to_process.append(args[i])
            i += 1
    
    if not sed_commands:
        print("Error: No sed commands provided.", file=sys.stderr)
        sys.exit(1)
    
    # If files are provided, process each one
    if files_to_process:
        for file in files_to_process:
            process_input(file, sed_commands, printout)
    else:
        # no files provided, read from stdin
        process_input(sys.stdin, sed_commands, printout)

if __name__ == '__main__':
    main()